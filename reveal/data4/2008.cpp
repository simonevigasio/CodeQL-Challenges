static gint dissect_amf0_value_type ( tvbuff_t * tvb , gint offset , proto_tree * tree , gboolean * amf3_encoding , proto_item * parent_ti ) {
 guint8 iObjType ;
 proto_item * ti ;
 proto_tree * val_tree ;
 gint iValueOffset = offset ;
 guint32 iIntegerValue ;
 double iDoubleValue ;
 gboolean iBooleanValue ;
 guint iStringLength ;
 gchar * iStringValue ;
 guint iArrayLength ;
 guint i ;
 nstime_t t ;
 gint64 iInteger64Value ;
 guint count ;
 iObjType = tvb_get_guint8 ( tvb , offset ) ;
 if ( parent_ti != NULL ) proto_item_append_text ( parent_ti , " %s" , val_to_str_const ( iObjType , amf0_type_vals , "Unknown" ) ) ;
 switch ( iObjType ) {
 case AMF0_OBJECT : ti = proto_tree_add_item ( tree , hf_amf_object , tvb , offset , - 1 , ENC_NA ) ;
 val_tree = proto_item_add_subtree ( ti , ett_amf_value ) ;
 break ;
 case AMF0_ECMA_ARRAY : ti = proto_tree_add_item ( tree , hf_amf_ecmaarray , tvb , offset , - 1 , ENC_NA ) ;
 val_tree = proto_item_add_subtree ( ti , ett_amf_value ) ;
 break ;
 case AMF0_STRICT_ARRAY : ti = proto_tree_add_item ( tree , hf_amf_strictarray , tvb , offset , - 1 , ENC_NA ) ;
 val_tree = proto_item_add_subtree ( ti , ett_amf_value ) ;
 break ;
 default : val_tree = proto_tree_add_subtree ( tree , tvb , offset , - 1 , ett_amf_value , & ti , val_to_str_const ( iObjType , amf0_type_vals , "Unknown" ) ) ;
 break ;
 }
 proto_tree_add_uint ( val_tree , hf_amf_amf0_type , tvb , iValueOffset , 1 , iObjType ) ;
 iValueOffset ++ ;
 switch ( iObjType ) {
 case AMF0_NUMBER : iDoubleValue = tvb_get_ntohieee_double ( tvb , iValueOffset ) ;
 proto_tree_add_double ( val_tree , hf_amf_number , tvb , iValueOffset , 8 , iDoubleValue ) ;
 iValueOffset += 8 ;
 proto_item_append_text ( ti , " %." G_STRINGIFY ( DBL_DIG ) "g" , iDoubleValue ) ;
 if ( parent_ti != NULL ) proto_item_append_text ( parent_ti , " %." G_STRINGIFY ( DBL_DIG ) "g" , iDoubleValue ) ;
 break ;
 case AMF0_BOOLEAN : iBooleanValue = tvb_get_guint8 ( tvb , iValueOffset ) ;
 proto_tree_add_boolean ( val_tree , hf_amf_boolean , tvb , iValueOffset , 1 , iBooleanValue ) ;
 iValueOffset += 1 ;
 proto_item_append_text ( ti , iBooleanValue ? " true" : " false" ) ;
 if ( parent_ti != NULL ) proto_item_append_text ( parent_ti , iBooleanValue ? " true" : " false" ) ;
 break ;
 case AMF0_STRING : iStringLength = tvb_get_ntohs ( tvb , iValueOffset ) ;
 proto_tree_add_uint ( val_tree , hf_amf_stringlength , tvb , iValueOffset , 2 , iStringLength ) ;
 iValueOffset += 2 ;
 iStringValue = tvb_get_string_enc ( wmem_packet_scope ( ) , tvb , iValueOffset , iStringLength , ENC_UTF_8 | ENC_NA ) ;
 if ( iStringLength != 0 ) proto_tree_add_string ( val_tree , hf_amf_string , tvb , iValueOffset , iStringLength , iStringValue ) ;
 iValueOffset += iStringLength ;
 proto_item_append_text ( ti , " '%s'" , iStringValue ) ;
 if ( parent_ti != NULL ) proto_item_append_text ( parent_ti , " '%s'" , iStringValue ) ;
 break ;
 case AMF0_OBJECT : iValueOffset = dissect_amf0_property_list ( tvb , iValueOffset , val_tree , & count , amf3_encoding ) ;
 proto_item_append_text ( ti , " (%u items)" , count ) ;
 break ;
 case AMF0_NULL : case AMF0_UNDEFINED : break ;
 case AMF0_REFERENCE : iIntegerValue = tvb_get_ntohs ( tvb , iValueOffset ) ;
 proto_tree_add_uint ( val_tree , hf_amf_object_reference , tvb , iValueOffset , 2 , iIntegerValue ) ;
 iValueOffset += 2 ;
 proto_item_append_text ( ti , " %d" , iIntegerValue ) ;
 break ;
 case AMF0_ECMA_ARRAY : iArrayLength = tvb_get_ntohl ( tvb , iValueOffset ) ;
 proto_tree_add_uint ( val_tree , hf_amf_arraylength , tvb , iValueOffset , 4 , iArrayLength ) ;
 iValueOffset += 4 ;
 iValueOffset = dissect_amf0_property_list ( tvb , iValueOffset , val_tree , & count , amf3_encoding ) ;
 proto_item_append_text ( ti , " (%u items)" , count ) ;
 break ;
 case AMF0_END_OF_OBJECT : proto_tree_add_item ( tree , hf_amf_end_of_object_marker , tvb , iValueOffset , 3 , ENC_NA ) ;
 iValueOffset += 3 ;
 break ;
 case AMF0_STRICT_ARRAY : iArrayLength = tvb_get_ntohl ( tvb , iValueOffset ) ;
 proto_tree_add_uint ( val_tree , hf_amf_arraylength , tvb , iValueOffset , 4 , iArrayLength ) ;
 iValueOffset += 4 ;
 for ( i = 0 ;
 i < iArrayLength ;
 i ++ ) iValueOffset = dissect_amf0_value_type ( tvb , iValueOffset , val_tree , amf3_encoding , NULL ) ;
 proto_item_append_text ( ti , " (%u items)" , iArrayLength ) ;
 break ;
 case AMF0_DATE : iDoubleValue = tvb_get_ntohieee_double ( tvb , iValueOffset ) ;
 t . secs = ( time_t ) ( iDoubleValue / 1000 ) ;
 t . nsecs = ( int ) ( ( iDoubleValue - 1000 * ( double ) t . secs ) * 1000000 ) ;
 proto_tree_add_time ( val_tree , hf_amf_date , tvb , iValueOffset , 8 , & t ) ;
 iValueOffset += 8 ;
 proto_item_append_text ( ti , " %s" , abs_time_to_str ( wmem_packet_scope ( ) , & t , ABSOLUTE_TIME_LOCAL , TRUE ) ) ;
 if ( parent_ti != NULL ) proto_item_append_text ( parent_ti , " %s" , abs_time_to_str ( wmem_packet_scope ( ) , & t , ABSOLUTE_TIME_LOCAL , TRUE ) ) ;
 iValueOffset += 2 ;
 break ;
 case AMF0_LONG_STRING : case AMF0_XML : iStringLength = tvb_get_ntohl ( tvb , iValueOffset ) ;
 proto_tree_add_uint ( val_tree , hf_amf_stringlength , tvb , iValueOffset , 2 , iStringLength ) ;
 iValueOffset += 4 ;
 iStringValue = tvb_get_string_enc ( wmem_packet_scope ( ) , tvb , iValueOffset , iStringLength , ENC_UTF_8 | ENC_NA ) ;
 if ( iStringLength != 0 ) proto_tree_add_string ( val_tree , ( iObjType == AMF0_XML ) ? hf_amf_xml_doc : hf_amf_longstring , tvb , iValueOffset , iStringLength , iStringValue ) ;
 iValueOffset += iStringLength ;
 proto_item_append_text ( ti , " '%s'" , iStringValue ) ;
 if ( parent_ti != NULL ) proto_item_append_text ( parent_ti , " '%s'" , iStringValue ) ;
 break ;
 case AMF0_UNSUPPORTED : break ;
 case AMF0_TYPED_OBJECT : iStringLength = tvb_get_ntohs ( tvb , iValueOffset ) ;
 proto_tree_add_uint ( val_tree , hf_amf_stringlength , tvb , iValueOffset , 2 , iStringLength ) ;
 iValueOffset += 2 ;
 iStringValue = tvb_get_string_enc ( wmem_packet_scope ( ) , tvb , iValueOffset , iStringLength , ENC_UTF_8 | ENC_NA ) ;
 proto_tree_add_string ( val_tree , hf_amf_string , tvb , iValueOffset , iStringLength , iStringValue ) ;
 iValueOffset += iStringLength ;
 iValueOffset = dissect_amf0_property_list ( tvb , iValueOffset , val_tree , & count , amf3_encoding ) ;
 break ;
 case AMF0_AMF3_MARKER : * amf3_encoding = TRUE ;
 break ;
 case AMF0_INT64 : iInteger64Value = tvb_get_ntoh64 ( tvb , iValueOffset ) ;
 proto_tree_add_int64 ( val_tree , hf_amf_int64 , tvb , iValueOffset , 8 , iInteger64Value ) ;
 iValueOffset += 8 ;
 proto_item_append_text ( ti , " %" G_GINT64_MODIFIER "d" , iInteger64Value ) ;
 if ( parent_ti != NULL ) proto_item_append_text ( parent_ti , " %" G_GINT64_MODIFIER "d" , iInteger64Value ) ;
 break ;
 default : iValueOffset = tvb_reported_length ( tvb ) ;
 break ;
 }
 proto_item_set_end ( ti , tvb , iValueOffset ) ;
 return iValueOffset ;
 }