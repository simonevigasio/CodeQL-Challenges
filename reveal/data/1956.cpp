static int dca_parse_frame_header ( DCAContext * s ) {
 init_get_bits ( & s -> gb , s -> dca_buffer , s -> dca_buffer_size * 8 ) ;
 skip_bits_long ( & s -> gb , 32 ) ;
 s -> frame_type = get_bits ( & s -> gb , 1 ) ;
 s -> samples_deficit = get_bits ( & s -> gb , 5 ) + 1 ;
 s -> crc_present = get_bits ( & s -> gb , 1 ) ;
 s -> sample_blocks = get_bits ( & s -> gb , 7 ) + 1 ;
 s -> frame_size = get_bits ( & s -> gb , 14 ) + 1 ;
 if ( s -> frame_size < 95 ) return AVERROR_INVALIDDATA ;
 s -> amode = get_bits ( & s -> gb , 6 ) ;
 s -> sample_rate = avpriv_dca_sample_rates [ get_bits ( & s -> gb , 4 ) ] ;
 if ( ! s -> sample_rate ) return AVERROR_INVALIDDATA ;
 s -> bit_rate_index = get_bits ( & s -> gb , 5 ) ;
 s -> bit_rate = dca_bit_rates [ s -> bit_rate_index ] ;
 if ( ! s -> bit_rate ) return AVERROR_INVALIDDATA ;
 s -> downmix = get_bits ( & s -> gb , 1 ) ;
 s -> dynrange = get_bits ( & s -> gb , 1 ) ;
 s -> timestamp = get_bits ( & s -> gb , 1 ) ;
 s -> aux_data = get_bits ( & s -> gb , 1 ) ;
 s -> hdcd = get_bits ( & s -> gb , 1 ) ;
 s -> ext_descr = get_bits ( & s -> gb , 3 ) ;
 s -> ext_coding = get_bits ( & s -> gb , 1 ) ;
 s -> aspf = get_bits ( & s -> gb , 1 ) ;
 s -> lfe = get_bits ( & s -> gb , 2 ) ;
 s -> predictor_history = get_bits ( & s -> gb , 1 ) ;
 if ( s -> crc_present ) s -> header_crc = get_bits ( & s -> gb , 16 ) ;
 s -> multirate_inter = get_bits ( & s -> gb , 1 ) ;
 s -> version = get_bits ( & s -> gb , 4 ) ;
 s -> copy_history = get_bits ( & s -> gb , 2 ) ;
 s -> source_pcm_res = get_bits ( & s -> gb , 3 ) ;
 s -> front_sum = get_bits ( & s -> gb , 1 ) ;
 s -> surround_sum = get_bits ( & s -> gb , 1 ) ;
 s -> dialog_norm = get_bits ( & s -> gb , 4 ) ;
 s -> output = s -> amode ;
 if ( s -> lfe ) s -> output |= DCA_LFE ;
 # ifdef TRACE av_log ( s -> avctx , AV_LOG_DEBUG , "frame type: %i\n" , s -> frame_type ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "samples deficit: %i\n" , s -> samples_deficit ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "crc present: %i\n" , s -> crc_present ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "sample blocks: %i (%i samples)\n" , s -> sample_blocks , s -> sample_blocks * 32 ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "frame size: %i bytes\n" , s -> frame_size ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "amode: %i (%i channels)\n" , s -> amode , dca_channels [ s -> amode ] ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "sample rate: %i Hz\n" , s -> sample_rate ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "bit rate: %i bits/s\n" , s -> bit_rate ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "downmix: %i\n" , s -> downmix ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "dynrange: %i\n" , s -> dynrange ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "timestamp: %i\n" , s -> timestamp ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "aux_data: %i\n" , s -> aux_data ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "hdcd: %i\n" , s -> hdcd ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "ext descr: %i\n" , s -> ext_descr ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "ext coding: %i\n" , s -> ext_coding ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "aspf: %i\n" , s -> aspf ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "lfe: %i\n" , s -> lfe ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "predictor history: %i\n" , s -> predictor_history ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "header crc: %i\n" , s -> header_crc ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "multirate inter: %i\n" , s -> multirate_inter ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "version number: %i\n" , s -> version ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "copy history: %i\n" , s -> copy_history ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "source pcm resolution: %i (%i bits/sample)\n" , s -> source_pcm_res , dca_bits_per_sample [ s -> source_pcm_res ] ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "front sum: %i\n" , s -> front_sum ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "surround sum: %i\n" , s -> surround_sum ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "dialog norm: %i\n" , s -> dialog_norm ) ;
 av_log ( s -> avctx , AV_LOG_DEBUG , "\n" ) ;
 # endif s -> subframes = get_bits ( & s -> gb , 4 ) + 1 ;
 return dca_parse_audio_coding_header ( s , 0 ) ;
 }